!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCEPT_HEADER	documentLoader.go	/^const ACCEPT_HEADER = "application\/ld+json, application\/json;q=0.9, application\/javascript;q=0.5, text\/javascript;q=0.5, text\/plain;q=0.2, *\/*;q=0.1"$/;"	c
BLANK_NODE_LABEL	regex.go	/^		UCHAR.String() + ")*)>)")$/;"	v
COLLIDING_KEYWORDS	error.go	/^	INVALID_LANGUAGE_MAPPING       = errors.New("invalid language mapping")$/;"	v
COMPACTION_TO_LIST_OF_LISTS	error.go	/^	INVALID_LANGUAGE_MAP_VALUE     = errors.New("invalid language map value")$/;"	v
CONFLICTING_INDEXES	error.go	/^	INVALID_INDEX_VALUE            = errors.New("invalid @index value")$/;"	v
CYCLIC_IRI_MAPPING	error.go	/^	INVALID_IRI_MAPPING            = errors.New("invalid IRI mapping")$/;"	v
Context	context.go	/^type Context struct {$/;"	t
DECIMAL	regex.go	/^	INTEGER                          = regexp.MustCompile("[+-]?[0-9]+")$/;"	v
DOUBLE	regex.go	/^	EXPONENT                         = regexp.MustCompile("[eE][+-]?[0-9]+")$/;"	v
DocumentLoader	documentLoader.go	/^type DocumentLoader struct {$/;"	t
ECHAR	regex.go	/^		"|\\\\u005CU" + HEX.String() + HEX.String() + HEX.String() + HEX.String() + HEX.String() + HEX.String() + HEX.String() + HEX.String())$/;"	v
EXPONENT	regex.go	/^	DECIMAL                          = regexp.MustCompile("[+-]?[0-9]*\\\\.[0-9]+")$/;"	v
HEX	regex.go	/^		PN_CHARS.String() + "|[\\\\.])*(?:" + PN_CHARS.String() + "))?)")$/;"	v
INTEGER	regex.go	/^	LANGTAG                          = regexp.MustCompile("(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))")$/;"	v
INVALID_BASE_IRI	error.go	/^	RECURSIVE_CONTEXT_INCLUSION    = errors.New("recursive context inclusion")$/;"	v
INVALID_CONTAINER_MAPPING	error.go	/^	COLLIDING_KEYWORDS             = errors.New("colliding keywords")$/;"	v
INVALID_DEFAULT_LANGUAGE	error.go	/^	INVALID_VOCAB_MAPPING          = errors.New("invalid vocab mapping")$/;"	v
INVALID_ID_VALUE	error.go	/^	CONFLICTING_INDEXES            = errors.New("conflicting indexes")$/;"	v
INVALID_INDEX_VALUE	error.go	/^	LIST_OF_LISTS                  = errors.New("list of lists")$/;"	v
INVALID_INPUT	error.go	/^	UNKNOWN_FORMAT  = errors.New("unknown format")$/;"	v
INVALID_IRI_MAPPING	error.go	/^	INVALID_REVERSE_PROPERTY       = errors.New("invalid reverse property")$/;"	v
INVALID_KEYWORD_ALIAS	error.go	/^	CYCLIC_IRI_MAPPING             = errors.New("cyclic IRI mapping")$/;"	v
INVALID_LANGUAGE_MAPPING	error.go	/^	INVALID_TYPE_MAPPING           = errors.New("invalid type mapping")$/;"	v
INVALID_LANGUAGE_MAP_VALUE	error.go	/^	INVALID_SET_OR_LIST_OBJECT     = errors.New("invalid set or list object")$/;"	v
INVALID_LANGUAGE_TAGGED_STRING	error.go	/^	INVALID_VALUE_OBJECT_VALUE     = errors.New("invalid value object value")$/;"	v
INVALID_LANGUAGE_TAGGED_VALUE	error.go	/^	INVALID_LANGUAGE_TAGGED_STRING = errors.New("invalid language-tagged string")$/;"	v
INVALID_LOCAL_CONTEXT	error.go	/^	INVALID_ID_VALUE               = errors.New("invalid @id value")$/;"	v
INVALID_REMOTE_CONTEXT	error.go	/^	LOADING_REMOTE_CONTEXT_FAILED  = errors.New("loading remote context failed")$/;"	v
INVALID_REVERSE_PROPERTY	error.go	/^	INVALID_TERM_DEFINITION        = errors.New("invalid term definition")$/;"	v
INVALID_REVERSE_PROPERTY_MAP	error.go	/^	COMPACTION_TO_LIST_OF_LISTS    = errors.New("compaction to list of lists")$/;"	v
INVALID_REVERSE_PROPERTY_VALUE	error.go	/^	INVALID_REVERSE_VALUE          = errors.New("invalid @reverse value")$/;"	v
INVALID_REVERSE_VALUE	error.go	/^	INVALID_REVERSE_PROPERTY_MAP   = errors.New("invalid reverse property map")$/;"	v
INVALID_SET_OR_LIST_OBJECT	error.go	/^	INVALID_TYPED_VALUE            = errors.New("invalid typed value")$/;"	v
INVALID_TERM_DEFINITION	error.go	/^	KEYWORD_REDEFINITION           = errors.New("keyword redefinition")$/;"	v
INVALID_TYPED_VALUE	error.go	/^	INVALID_LANGUAGE_TAGGED_VALUE  = errors.New("invalid language-tagged value")$/;"	v
INVALID_TYPE_MAPPING	error.go	/^	INVALID_KEYWORD_ALIAS          = errors.New("invalid keyword alias")$/;"	v
INVALID_TYPE_VALUE	error.go	/^	INVALID_CONTAINER_MAPPING      = errors.New("invalid container mapping")$/;"	v
INVALID_VALUE_OBJECT	error.go	/^	INVALID_TYPE_VALUE             = errors.New("invalid type value")$/;"	v
INVALID_VALUE_OBJECT_VALUE	error.go	/^	INVALID_VALUE_OBJECT           = errors.New("invalid value object")$/;"	v
INVALID_VOCAB_MAPPING	error.go	/^	INVALID_BASE_IRI               = errors.New("invalid base IRI")$/;"	v
IRIREF	regex.go	/^	ECHAR  = regexp.MustCompile("\\\\u005C[tbnrf\\\\u005C\\"']")$/;"	v
KEYWORD_REDEFINITION	error.go	/^	INVALID_DEFAULT_LANGUAGE       = errors.New("invalid default language")$/;"	v
LANGTAG	regex.go	/^	STRING_LITERAL_LONG_QUOTE        = regexp.MustCompile("\\"\\"\\"(?:(?:(?:\\"|\\"\\")?[^\\\\\\"\\\\\\\\])|" + ECHAR.String() + "|" + UCHAR.String() + ")*\\"\\"\\"")$/;"	v
LIST_OF_LISTS	error.go	/^	LOADING_DOCUMENT_FAILED        = errors.New("loading document failed")$/;"	v
LOADING_DOCUMENT_FAILED	error.go	/^var ($/;"	v
LOADING_REMOTE_CONTEXT_FAILED	error.go	/^	MULTIPLE_CONTEXT_LINK_HEADERS  = errors.New("multiple context link headers")$/;"	v
MAX_CONTEXT_URLS	utils.go	/^const MAX_CONTEXT_URLS = 10$/;"	c
MULTIPLE_CONTEXT_LINK_HEADERS	error.go	/^	INVALID_LOCAL_CONTEXT          = errors.New("invalid local context")$/;"	v
NOT_IMPLEMENTED	error.go	/^	SYNTAX_ERROR    = errors.New("syntax error")$/;"	v
NewDocumentLoader	documentLoader.go	/^func NewDocumentLoader() *DocumentLoader {$/;"	f
NewOptions	options.go	/^func NewOptions(base string) *Options {$/;"	f
NewRemoteDocument	remoteDocument.go	/^func NewRemoteDocument(url string, document interface{}) *RemoteDocument {$/;"	f
NewRemoteDocumentContext	remoteDocument.go	/^func NewRemoteDocumentContext(url string, document interface{}, context string) *RemoteDocument {$/;"	f
NewUniqueNamer	uniqueNamer.go	/^func NewUniqueNamer(prefix string) *UniqueNamer {$/;"	f
Options	options.go	/^type Options struct {$/;"	t
PARSE_ERROR	error.go	/^	INVALID_INPUT   = errors.New("invalid input")$/;"	v
PERCENT	regex.go	/^	PN_LOCAL_ESC = regexp.MustCompile("[\\\\\\\\][_~\\\\.\\\\-!$&'\\\\(\\\\)*+,;=\/?#@%]")$/;"	v
PLX	regex.go	/^	PERCENT      = regexp.MustCompile("%" + HEX.String() + HEX.String())$/;"	v
PNAME_LN	regex.go	/^	PNAME_NS = regexp.MustCompile("((?:" + PN_PREFIX.String() + ")?):")$/;"	v
PNAME_NS	regex.go	/^		"))?)")$/;"	v
PN_CHARS	regex.go	/^	PN_CHARS_U = regexp.MustCompile(PN_CHARS_BASE.String() + "|[_]")$/;"	v
PN_CHARS_BASE	regex.go	/^var ($/;"	v
PN_CHARS_U	regex.go	/^		"[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]")$/;"	v
PN_LOCAL	regex.go	/^	PLX          = regexp.MustCompile(PERCENT.String() + "|" + PN_LOCAL_ESC.String())$/;"	v
PN_LOCAL_ESC	regex.go	/^	HEX          = regexp.MustCompile("[0-9A-Fa-f]")$/;"	v
PN_PREFIX	regex.go	/^	PN_CHARS   = regexp.MustCompile(PN_CHARS_U.String() + "|[-0-9]|[\\\\u00B7]|[\\\\u0300-\\\\u036F]|[\\\\u203F-\\\\u2040]")$/;"	v
RDF_FIRST	consts.go	/^	RDF_TYPE          = RDF_SYNTAX_NS + "type"$/;"	c
RDF_LANGSTRING	consts.go	/^	RDF_OBJECT        = RDF_SYNTAX_NS + "object"$/;"	c
RDF_LIST	consts.go	/^	RDF_LANGSTRING    = RDF_SYNTAX_NS + "langString"$/;"	c
RDF_NIL	consts.go	/^	RDF_REST          = RDF_SYNTAX_NS + "rest"$/;"	c
RDF_OBJECT	consts.go	/^	RDF_XML_LITERAL   = RDF_SYNTAX_NS + "XMLLiteral"$/;"	c
RDF_PLAIN_LITERAL	consts.go	/^	RDF_NIL           = RDF_SYNTAX_NS + "nil"$/;"	c
RDF_REST	consts.go	/^	RDF_FIRST         = RDF_SYNTAX_NS + "first"$/;"	c
RDF_SCHEMA_NS	consts.go	/^	RDF_SYNTAX_NS = "http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#"$/;"	c
RDF_SYNTAX_NS	consts.go	/^const ($/;"	c
RDF_TYPE	consts.go	/^	XSD_STRING  = XSD_NS + "string"$/;"	c
RDF_XML_LITERAL	consts.go	/^	RDF_PLAIN_LITERAL = RDF_SYNTAX_NS + "PlainLiteral"$/;"	c
RECURSIVE_CONTEXT_INCLUSION	error.go	/^	INVALID_REMOTE_CONTEXT         = errors.New("invalid remote context")$/;"	v
RemoteDocument	remoteDocument.go	/^type RemoteDocument struct {$/;"	t
STRING_LITERAL_LONG_QUOTE	regex.go	/^	STRING_LITERAL_LONG_SINGLE_QUOTE = regexp.MustCompile("'''(?:(?:(?:'|'')?[^'\\\\\\\\])|" + ECHAR.String() + "|" + UCHAR.String() + ")*'''")$/;"	v
STRING_LITERAL_LONG_SINGLE_QUOTE	regex.go	/^	STRING_LITERAL_SINGLE_QUOTE      = regexp.MustCompile("'(?:[^\\\\u0027\\\\u005C\\\\u000A\\\\u000D]|(?:" + ECHAR.String() + ")|(?:" + UCHAR.String() + "))*'")$/;"	v
STRING_LITERAL_QUOTE	regex.go	/^	WS_1_N                           = regexp.MustCompile(WS.String() + "+")$/;"	v
STRING_LITERAL_SINGLE_QUOTE	regex.go	/^	STRING_LITERAL_QUOTE             = regexp.MustCompile("\\"(?:[^\\\\u0022\\\\u005C\\\\u000A\\\\u000D]|(?:" + ECHAR.String() + ")|(?:" + UCHAR.String() + "))*\\"")$/;"	v
SYNTAX_ERROR	error.go	/^	INVALID_REVERSE_PROPERTY_VALUE = errors.New("invalid reverse property value")$/;"	v
UCHAR	regex.go	/^	PNAME_LN = regexp.MustCompile("" + PNAME_NS.String() + PN_LOCAL.String())$/;"	v
UNKNOWN_ERROR	error.go	/^	PARSE_ERROR     = errors.New("parse error")$/;"	v
UNKNOWN_FORMAT	error.go	/^	NOT_IMPLEMENTED = errors.New("not implemnted")$/;"	v
UniqueNamer	uniqueNamer.go	/^type UniqueNamer struct {$/;"	t
WS	regex.go	/^		"|[0-9])(?:(?:" + PN_CHARS.String() + "|[\\\\.])*(?:" + PN_CHARS.String() + "))?))")$/;"	v
WS_0_1	regex.go	/^	WS_0_N                           = regexp.MustCompile(WS.String() + "*")$/;"	v
WS_0_N	regex.go	/^	WS                               = regexp.MustCompile("[ \\t\\r\\n]")$/;"	v
WS_1_N	regex.go	/^	WS_0_1                           = regexp.MustCompile(WS.String() + "?")$/;"	v
XSD_ANYTYPE	consts.go	/^	XSD_NS        = "http:\/\/www.w3.org\/2001\/XMLSchema#"$/;"	c
XSD_ANYURI	consts.go	/^	XSD_DECIMAL = XSD_NS + "decimal"$/;"	c
XSD_BOOLEAN	consts.go	/^	XSD_ANYTYPE = XSD_NS + "anyType"$/;"	c
XSD_DECIMAL	consts.go	/^	XSD_FLOAT   = XSD_NS + "float"$/;"	c
XSD_DOUBLE	consts.go	/^	XSD_BOOLEAN = XSD_NS + "boolean"$/;"	c
XSD_FLOAT	consts.go	/^	XSD_INTEGER = XSD_NS + "integer"$/;"	c
XSD_INTEGER	consts.go	/^	XSD_DOUBLE  = XSD_NS + "double"$/;"	c
XSD_NS	consts.go	/^	RDF_SCHEMA_NS = "http:\/\/www.w3.org\/2000\/01\/rdf-schema#"$/;"	c
XSD_STRING	consts.go	/^	XSD_ANYURI  = XSD_NS + "anyURI"$/;"	c
allKeywords	utils.go	/^var ($/;"	v
clone	context.go	/^func (* Context) clone() *Context {$/;"	f
compactValue	compactionApi.go	/^func (c *Context) compactValue(activeProperty string,$/;"	f
contains	uniqueNamer.go	/^func (un *UniqueNamer) contains(key string) bool {$/;"	f
createTermDefinition	contextApi.go	/^func (c *Context) createTermDefinition(context map[string]interface{},$/;"	f
deepCompare	utils.go	/^func deepCompare(v1, v2 interface{}) bool {$/;"	f
deepCompareMatters	utils.go	/^func deepCompareMatters(v1, v2 interface{}, listOrderMatters bool) bool {$/;"	f
deepContains	utils.go	/^func deepContains(values []interface{}, value interface{}) bool {$/;"	f
expandIri	expansionApi.go	/^func (c *Context) expandIri(value string, relative bool, vocab bool,$/;"	f
get	uniqueNamer.go	/^func (un *UniqueNamer) get(old string) string {$/;"	f
getContainer	context.go	/^func (c *Context) getContainer(property string) string {$/;"	f
getLanguageMapping	context.go	/^func (c *Context) getLanguageMapping(property string) (string, bool) {$/;"	f
getTermDefinition	context.go	/^func (c *Context) getTermDefinition(key string) (map[string]interface{}, bool) {$/;"	f
getTypeMapping	context.go	/^func (c *Context) getTypeMapping(property string) (string, bool) {$/;"	f
gojsonld	compactionApi.go	/^package gojsonld$/;"	p
gojsonld	consts.go	/^package gojsonld$/;"	p
gojsonld	context.go	/^package gojsonld$/;"	p
gojsonld	contextApi.go	/^package gojsonld$/;"	p
gojsonld	documentLoader.go	/^package gojsonld$/;"	p
gojsonld	error.go	/^package gojsonld$/;"	p
gojsonld	expansionApi.go	/^package gojsonld$/;"	p
gojsonld	flatteningApi.go	/^package gojsonld$/;"	p
gojsonld	jsonldApi.go	/^package gojsonld$/;"	p
gojsonld	normlizeUtils.go	/^package gojsonld$/;"	p
gojsonld	options.go	/^package gojsonld$/;"	p
gojsonld	processor.go	/^package gojsonld$/;"	p
gojsonld	rdfDataset.go	/^package gojsonld$/;"	p
gojsonld	rdfDatasetUtils.go	/^package gojsonld$/;"	p
gojsonld	regex.go	/^package gojsonld$/;"	p
gojsonld	remoteDocument.go	/^package gojsonld$/;"	p
gojsonld	serializationApi.go	/^package gojsonld$/;"	p
gojsonld	uniqueNamer.go	/^package gojsonld$/;"	p
gojsonld	utils.go	/^package gojsonld$/;"	p
init	context.go	/^func (c *Context) init(options *Options) {$/;"	f
isAbsoluteIri	utils.go	/^func isAbsoluteIri(value string) bool {$/;"	f
isBlankNodeIdentifier	utils.go	/^func isBlankNodeIdentifier(value string) bool {$/;"	f
isKeyword	utils.go	/^func isKeyword(key interface{}) bool {$/;"	f
loadDocument	documentLoader.go	/^func (dl *DocumentLoader) loadDocument(uri string) *RemoteDocument {$/;"	f
mergeValue	utils.go	/^func mergeValue(obj map[string][]interface{}, key string, value interface{}) {$/;"	f
parse	contextApi.go	/^func (c *Context) parse(localContext interface{}, remoteContexts []string) *Context {$/;"	f
processingMode	options.go	/^const ($/;"	c
